name: Build Mac and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for the Mac build (e.g. 0.9.8)"
        required: true

jobs:
  build-mac:
    runs-on: macos-latest

    steps:
      # 1) Check out the code
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Bump version in package.json
      - name: Set app version
        run: |
          echo "Bumping version to ${{ github.event.inputs.version }}"
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      # 3) Install Developer ID Certificate
      - name: Install Developer ID Certificate
        run: |
          echo "${{ secrets.MAC_CERT_P12 }}" | base64 --decode > /tmp/cert.p12
          security create-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          security list-keychains -s build.keychain $(security list-keychains -s | tr -d '"')
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import /tmp/cert.p12 -k build.keychain -P "${{ secrets.MAC_CERT_PW }}" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      # 4) Provide Apple ID creds for Notarization
      - name: Set env for Notarization
        run: |
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_ID_PASSWORD=${{ secrets.APPLE_ID_PASSWORD }}" >> $GITHUB_ENV

      # 5) Download demucs-cxfreeze-mac.zip from 'release-assets'
      - name: Download demucs-cxfreeze-mac.zip
        run: |
          echo "Fetching release data from 'release-assets'..."
          RELEASE_DATA=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/davidcamick/camstem/releases/tags/release-assets")

          ASSET_ID=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name=="demucs-cxfreeze-mac.zip") | .id')

          if [ -z "$ASSET_ID" ] || [ "$ASSET_ID" == "null" ]; then
            echo "Could not find demucs-cxfreeze-mac.zip in release-assets!"
            exit 1
          fi

          echo "Downloading demucs-cxfreeze-mac.zip (asset id=$ASSET_ID) ..."
          curl -L \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/davidcamick/camstem/releases/assets/$ASSET_ID" \
            -o demucs-cxfreeze-mac.zip

          rm -rf src/backend/demucs-cxfreeze-mac
          unzip -q demucs-cxfreeze-mac.zip -d src/backend
          rm demucs-cxfreeze-mac.zip

      # 6) Download Models.zip from 'release-assets'
      - name: Download Models.zip
        run: |
          RELEASE_DATA=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/davidcamick/camstem/releases/tags/release-assets")

          ASSET_ID=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name=="Models.zip") | .id')

          if [ -z "$ASSET_ID" ] || [ "$ASSET_ID" == "null" ]; then
            echo "Could not find Models.zip in release-assets!"
            exit 1
          fi

          echo "Downloading Models.zip (asset id=$ASSET_ID) ..."
          curl -L \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/davidcamick/camstem/releases/assets/$ASSET_ID" \
            -o Models.zip

          rm -rf Models
          unzip -q Models.zip -d .
          rm Models.zip

      # 7) Install dependencies
      - name: Install dependencies
        run: npm install

      # 8) Build & publish to GitHub (signed & notarized if dev cert is found)
      - name: Build Mac (publish to GitHub)
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
