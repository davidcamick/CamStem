name: Build Mac and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for the Mac build (e.g. 0.9.8)"
        required: true
      sign_app:
        description: "Sign the application (true/false)"
        required: true
        default: 'false'
        type: boolean

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build-mac:
    runs-on: macos-latest

    steps:
      # 1) Check out the code
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Bump version
      - name: Set app version
        run: |
          echo "Bumping version to ${{ github.event.inputs.version }}"
          npm version ${{ github.event.inputs.version }} --allow-same-version --no-git-tag-version

      # 3) Install Developer ID Certificate (only if signing)
      - name: Install Developer ID Certificate
        if: ${{ inputs.sign_app == 'true' }}
        run: |
          echo "Setting up certificates..."
          
          # 3.1 Decode the base64-encoded p12
          echo "${{ secrets.MAC_CERT_P12 }}" | base64 --decode > /tmp/cert.p12
          
          # Remove any existing keychains
          security delete-keychain build.keychain || true
          
          # 3.2 Create keychain with explicit settings
          security create-keychain -p "temp123" build.keychain
          security set-keychain-settings -u -t 3600 build.keychain
          
          # 3.3 Add to keychain list and make default
          security list-keychains -d user -s build.keychain login.keychain
          security default-keychain -s build.keychain
          
          # 3.4 Unlock keychain with longer timeout
          security unlock-keychain -p "temp123" build.keychain
          
          # 3.5 Import certificate
          security import /tmp/cert.p12 -k build.keychain \
            -P "${{ secrets.MAC_CERT_PW }}" \
            -T /usr/bin/codesign -T /usr/bin/security
          
          # 3.6 Set partition list and allow codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temp123" build.keychain
          
          # Verify certificate installation
          echo "Verifying certificate installation..."
          security find-identity -v -p codesigning build.keychain
          
          # Clean up sensitive files
          rm -f /tmp/cert.p12

      # 4) Download demucs-cxfreeze-mac.zip from 'release-assets'
      - name: Download demucs-cxfreeze-mac.zip
        run: |
          curl -L \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://github.com/davidcamick/CamStem/releases/download/release-assets/demucs-cxfreeze-mac.zip" \
            -o demucs-cxfreeze-mac.zip

          rm -rf src/backend/demucs-cxfreeze-mac
          unzip -q demucs-cxfreeze-mac.zip -d src/backend
          rm demucs-cxfreeze-mac.zip

      # 5) Download Models.zip from 'release-assets'
      - name: Download Models.zip
        run: |
          curl -L \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://github.com/davidcamick/CamStem/releases/download/release-assets/Models.zip" \
            -o Models.zip

          rm -rf Models
          unzip -q Models.zip -d .
          rm Models.zip

      # 6) Install dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Clear npm cache
        run: |
          npm cache clean --force
          npm cache verify

      - name: Install dependencies (without electron)
        run: |
          npm install --no-save --ignore-scripts
          npm install --save-dev electron@latest
        continue-on-error: false

      - name: Rebuild dependencies
        run: |
          npm rebuild
          npm run postinstall || true

      # 7) Build & publish
      - name: Build Mac (publish to GitHub)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: npm run build:mac
